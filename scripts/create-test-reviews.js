import { connectToDatabase } from '../server/config/database.js';
import User from '../server/models/userModel.js';
import Booking from '../server/models/Booking.js';
import Review from '../server/models/Review.js';
import { ObjectId } from 'mongodb';

async function createTestReviews() {
  try {
    console.log('üîó Connexion √† la base de donn√©es...');
    await connectToDatabase();
    console.log('‚úÖ Connexion √©tablie');

    // R√©cup√©rer un professeur
    const teachers = await User.findUsers({ role: 'teacher' });
    if (teachers.length === 0) {
      console.log('‚ùå Aucun professeur trouv√©');
      return;
    }
    const teacher = teachers[0];
    console.log(`üë®‚Äçüè´ Professeur trouv√©: ${teacher.firstName} ${teacher.lastName}`);

    // R√©cup√©rer des √©tudiants
    const students = await User.findUsers({ role: 'student' });
    if (students.length === 0) {
      console.log('‚ùå Aucun √©tudiant trouv√©');
      return;
    }
    console.log(`üë• ${students.length} √©tudiants trouv√©s`);

    // R√©cup√©rer des r√©servations du professeur
    const bookings = await Booking.find({ teacherId: new ObjectId(teacher._id) });
    if (bookings.length === 0) {
      console.log('‚ùå Aucune r√©servation trouv√©e pour ce professeur');
      return;
    }
    console.log(`üìÖ ${bookings.length} r√©servations trouv√©es`);

    // Commentaires d'exemple
    const comments = [
      "Excellent professeur, tr√®s p√©dagogue et patient. J'ai beaucoup progress√© gr√¢ce √† ses cours.",
      "Cours tr√®s bien structur√© et adapt√© √† mon niveau. Je recommande vivement !",
      "Professeur comp√©tent et √† l'√©coute. Les explications sont claires et pr√©cises.",
      "Tr√®s satisfait de ce cours. Le professeur sait s'adapter aux difficult√©s de l'√©tudiant.",
      "Cours de qualit√© avec un professeur exp√©riment√©. Je continue avec plaisir.",
      "Approche p√©dagogique efficace et bienveillante. Parfait pour progresser.",
      "Professeur disponible et professionnel. Les cours sont toujours enrichissants.",
      "Excellente m√©thodologie d'enseignement. Je vois mes progr√®s rapidement.",
      "Cours dynamique et int√©ressant. Le professeur est passionn√© par sa mati√®re.",
      "Tr√®s bon √©quilibre entre th√©orie et pratique. Je recommande !"
    ];

    const tags = [
      ['P√©dagogie', 'Patient'],
      ['M√©thodologie', 'Clair'],
      ['Disponibilit√©', 'Professionnel'],
      ['Progression', 'Efficace'],
      ['Passion', 'Dynamique']
    ];

    // Cr√©er des avis de test
    const reviewsToCreate = [];
    const usedBookings = new Set();

    for (let i = 0; i < Math.min(8, bookings.length); i++) {
      const booking = bookings[i];
      
      // √âviter les doublons
      if (usedBookings.has(booking._id.toString())) continue;
      usedBookings.add(booking._id.toString());

      const student = students[i % students.length];
      const rating = Math.floor(Math.random() * 3) + 3; // 3-5 √©toiles
      const comment = comments[i % comments.length];
      const reviewTags = tags[i % tags.length];

      const review = {
        bookingId: new ObjectId(booking._id),
        studentId: new ObjectId(student._id),
        teacherId: new ObjectId(teacher._id),
        rating: rating,
        comment: comment,
        tags: reviewTags,
        status: 'approved',
        isAnonymous: false,
        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000) // Derniers 30 jours
      };

      reviewsToCreate.push(review);
    }

    // Ins√©rer les avis
    if (reviewsToCreate.length > 0) {
      const result = await Review.insertMany(reviewsToCreate);
      console.log(`‚úÖ ${result.length} avis cr√©√©s avec succ√®s`);

      // Afficher quelques statistiques
      const totalReviews = await Review.countDocuments({ teacherId: new ObjectId(teacher._id) });
      const avgRating = await Review.aggregate([
        { $match: { teacherId: new ObjectId(teacher._id) } },
        { $group: { _id: null, avg: { $avg: '$rating' } } }
      ]);

      console.log(`üìä Statistiques pour ${teacher.firstName} ${teacher.lastName}:`);
      console.log(`   - Total avis: ${totalReviews}`);
      console.log(`   - Note moyenne: ${avgRating.length > 0 ? avgRating[0].avg.toFixed(1) : 0}/5`);

    } else {
      console.log('‚ö†Ô∏è Aucun avis √† cr√©er (toutes les r√©servations ont d√©j√† des avis)');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des avis:', error);
  } finally {
    process.exit(0);
  }
}

// Ex√©cuter le script
createTestReviews();
