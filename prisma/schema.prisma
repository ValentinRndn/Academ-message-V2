// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  email        String        @unique
  password     String
  role         String        // "student", "teacher", or "admin"
  bio          String?
  avatar       String?
  status       String        @default("active") // "active", "inactive", "suspended"
  lastLoginAt  DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  subjectIds   String[]      @db.ObjectId
  
  // Relations (références) pour MongoDB
  sentMessages     Message[]      @relation("SentMessages", fields: [id], references: [senderId])
  receivedMessages Message[]      @relation("ReceivedMessages", fields: [id], references: [receiverId])
  teacherBookings  Booking[]      @relation("TeacherBookings", fields: [id], references: [teacherId])
  studentBookings  Booking[]      @relation("StudentBookings", fields: [id], references: [studentId])
  reviews          Review[]       @relation("TeacherReviews", fields: [id], references: [teacherId])
  availability     Availability[] @relation("TeacherAvailability", fields: [id], references: [teacherId])
}

model Subject {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations (références)
  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Booking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String   @db.ObjectId
  studentId String   @db.ObjectId
  start     DateTime
  end       DateTime
  status    String   @default("pending") // "pending", "confirmed", "cancelled", "completed"
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (références)
  teacher User @relation("TeacherBookings", fields: [teacherId], references: [id])
  student User @relation("StudentBookings", fields: [studentId], references: [id])
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String   @db.ObjectId
  studentId String   @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (références)
  teacher User @relation("TeacherReviews", fields: [teacherId], references: [id])
}

model Availability {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String   @db.ObjectId
  dayOfWeek Int      // 0-6, 0 = Sunday
  startTime DateTime
  endTime   DateTime
  recurring Boolean  @default(true)
  date      DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (références)
  teacher User @relation("TeacherAvailability", fields: [teacherId], references: [id])
}